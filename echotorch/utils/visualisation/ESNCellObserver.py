# -*- coding: utf-8 -*-
#
# File : echotorch/utils/visualisation/ESNCellObserver.py
# Description : Observe an ESNCell object to visualise it activity afterward.
# Date : 6th of November, 2019
#
# This file is part of EchoTorch.  EchoTorch is free software: you can
# redistribute it and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, version 2.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 51
# Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Copyright Nils Schaetti <nils.schaetti@unine.ch>

# Imports
import matplotlib.pyplot as plt


# Observe an ESNCell object to visualise its activity afterward
class ESNCellObserver:
    """
    Observe an ESNCell object to visualise its activity afterward
    """

    # Constructor
    def __init__(self, esn_cell):
        """
        Constructor
        :param esn_cell: ESNCell object to observe.
        """
        # Save ESN cell
        self._esn_cell = esn_cell

        # Info on cell
        self._input_dim = esn_cell.input_dim
        self._hidden_dim = esn_cell.output_dim

        # Add observers
        self._esn_cell.observe("inputs", self._observe_inputs)
        self._esn_cell.observe("states", self._observe_states)

        # Save inputs and states
        self._esn_cell_inputs = list()
        self._esn_cell_states = list()
    # end __init__

    ##################
    # PUBLIC
    ##################

    # Plot neurons activities
    def plot_neurons(self, sample_id, ids, start=0, length=-1):
        """
        Plot neuron activities
        :param sample_id: Index of the sample to plot
        :param ids: Indices of the neurons to plot
        :param start: Index of the starting point to plot
        :param length: Length of the plot
        """
        # Plot neurons
        if length == -1:
            plt.plot(self._esn_cell_states[sample_id][start:, ids])
        else:
            plt.plot(self._esn_cell_states[sample_id][start:start+length, ids])
        # end if
    # end plot_neurons

    # Plot inputs
    def plot_inputs(self, sample_id, ids, start=0, length=-1):
        """
        Plot inputs
        :param sample_id: Index of the inputs to plot
        :param ids: Indices of the inputs to plot
        :param start: Index of the starting point to plot
        :param length: Length of the plot
        """
        # Plot inputs
        if length == -1:
            plt.plot(self._esn_cell_inputs[sample_id][start:, ids])
        else:
            plt.plot(self._esn_cell_inputs[sample_id][start:start+length, ids])
        # end if
    # end plot_inputs

    ##################
    # PRIVATE
    ##################

    # Observe inputs
    def _observe_inputs(self, inputs):
        """
        Observe inputs
        :param inputs: Inputs to the ESN cell
        """
        self._esn_cell_inputs.append(inputs)
    # end _observe_inputs

    # Observe states
    def _observe_states(self, states):
        """
        Observe states
        :param states: States generated by the ESN cell
        """
        self._esn_cell_states.append(states)
    # end _observe_states

# end ESNCellObserver
